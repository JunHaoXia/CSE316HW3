{"ast":null,"code":"var _s = $RefreshSig$();\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n  DELETE_LIST_MODAL: \"DELETE_LIST_MODAL\",\n  CLOSE_MODAL: \"CLOSE_MODAL\",\n  EDIT_SONG_MODAL: \"EDIT_SONG_MODAL\",\n  DELETE_SONG_MODAL: \"DELETE_SONG_MODAL\",\n  MARK_SONG_FOR_EDIT: \"MARK_SONG_FOR_EDIT\",\n  MARK_SONG_FOR_DELETION: \"MARK_SONG_FOR_DELETION\"\n};\nconst currentModal = {\n  NONE: \"NONE\",\n  DELETE_LIST: \"DELETE_LIST\",\n  EDIT_SONG: \"EDIT_SONG\",\n  DELETE_SONG: \"DELETE_SONG\"\n};\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n  _s();\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    listForDeletion: null,\n    currentModal: currentModal.NONE,\n    editMode: false,\n    songForEdit: null\n  });\n\n  // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listForDeletion: null,\n            currentModal: currentModal.NONE,\n            editMode: false,\n            songForEdit: null\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listForDeletion: null,\n            currentModal: currentModal.NONE,\n            editMode: false,\n            songForEdit: null\n          });\n        }\n      // CREATE A NEW LIST\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false,\n            listForDeletion: null,\n            currentModal: currentModal.NONE,\n            editMode: true,\n            songForEdit: null\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listForDeletion: null,\n            currentModal: currentModal.NONE,\n            editMode: false,\n            songForEdit: null\n          });\n        }\n      // PREPARE TO DELETE A LIST\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listForDeletion: payload,\n            currentModal: currentModal.NONE,\n            editMode: false,\n            songForEdit: null\n          });\n        }\n      // UPDATE A LIST\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listForDeletion: null,\n            currentModal: currentModal.NONE,\n            editMode: false,\n            songForEdit: null\n          });\n        }\n      // START EDITING A LIST NAME\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true,\n            listForDeletion: null,\n            currentModal: currentModal.NONE,\n            editMode: false,\n            songForEdit: null\n          });\n        }\n      case GlobalStoreActionType.DELETE_LIST_MODAL:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listForDeletion: payload,\n            currentModal: currentModal.DELETE_LIST,\n            editMode: false,\n            songForEdit: null\n          });\n        }\n      case GlobalStoreActionType.EDIT_SONG_MODAL:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listForDeletion: null,\n            currentModal: currentModal.EDIT_SONG,\n            editMode: false,\n            songForEdit: payload\n          });\n        }\n      case GlobalStoreActionType.MARK_SONG_FOR_EDIT:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listForDeletion: null,\n            currentModal: currentModal.NONE,\n            editMode: false,\n            songForEdit: payload\n          });\n        }\n      default:\n        return store;\n    }\n  };\n  // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.name = newName;\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n            getListPairs(playlist);\n          }\n        }\n        updateList(playlist);\n      }\n    }\n    asyncChangeListName(id);\n  };\n  store.moveSong = function (target, source) {\n    async function asyncMoveSong() {\n      let response = await api.getPlaylistById(store.currentList._id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        console.log(playlist);\n        console.log(playlist.songs);\n        console.log(source);\n        console.log(target);\n        let sourceSong = playlist.songs[source];\n        playlist.songs[source] = playlist.songs[target];\n        playlist.songs[target] = sourceSong;\n        console.log(playlist.songs[source]);\n        console.log(playlist.songs[target]);\n        console.log(\"Inside moveSong\");\n        console.log(playlist.songs);\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n            getListPairs(playlist);\n          }\n        }\n        updateList(playlist);\n      }\n    }\n    asyncMoveSong();\n  };\n  store.deletePlaylist = function () {\n    async function asyncDeletePlaylist() {\n      console.log(\"Inside deletePlaylist\");\n      console.log(store.listForDeletion);\n      const response = await api.deletePlaylistById(store.listForDeletion._id);\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.DELETE_LIST,\n          payload: null\n        });\n        store.closeModal(\"delete-list-modal\");\n        store.loadIdNamePairs();\n      }\n    }\n    asyncDeletePlaylist();\n  };\n  store.createNewList = function () {\n    async function asyncCreateNewList() {\n      let name = \"Untitled\" + (store.newListCounter + 1);\n      const response = await api.createPlaylist({\n        name: name,\n        songs: []\n      });\n      if (response.data.success) {\n        let playlist = response.data.playlists;\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.CREATE_NEW_LIST,\n            payload: playlist\n          });\n          store.newListCounter += 1;\n          store.loadIdNamePairs();\n        }\n      }\n    }\n    asyncCreateNewList();\n  };\n  store.markListForDeletion = function (id) {\n    console.log(\"inside markListForDeletion\", id);\n    storeReducer({\n      type: GlobalStoreActionType.DELETE_LIST_MODAL,\n      payload: id\n    });\n    console.log(id);\n    console.log(store.listForDeletion);\n  };\n  store.markSongForEdit = function (song_and_index) {\n    console.log(\"inside markSongForEdit\", song_and_index);\n    storeReducer({\n      type: GlobalStoreActionType.EDIT_SONG_MODAL,\n      payload: song_and_index\n    });\n  };\n  store.markSongForDeletion = function (song_and_index) {\n    console.log(\"inside markSongForDeletion\", song_and_index);\n    storeReducer({\n      type: GlobalStoreActionType.DELETE_SONG_MODAL,\n      payload: song_and_index\n    });\n  };\n  store.getListMarkedForDeletion = function () {\n    if (store.listForDeletion) {\n      return store.listForDeletion.name;\n    }\n  };\n  store.isDeleteListModalOpen = () => {\n    console.log(\"inside isDeleteListModalOpen\");\n    return store.currentModal === currentModal.DELETE_LIST;\n  };\n  // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  };\n  store.closeModal = modal => {\n    document.getElementById(modal).classList.remove(\"is-visible\");\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_MODAL,\n      payload: null\n    });\n  };\n  // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n    asyncLoadIdNamePairs();\n  };\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n    asyncSetCurrentList(id);\n  };\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n  store.redo = function () {\n    tps.doTransaction();\n  };\n  store.addSong = function (index, song) {\n    async function asyncAddSong() {\n      let response = await api.getPlaylistById(store.currentList._id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        console.log(playlist);\n        playlist.songs.splice(index, 0, song);\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n            getListPairs(playlist);\n          }\n        }\n        updateList(playlist);\n      }\n    }\n    asyncAddSong();\n  };\n\n  // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n  store.setlistNameActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  };\n\n  // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n  return {\n    store,\n    storeReducer\n  };\n};\n_s(useGlobalStore, \"OXrTCI3eBZizSjfwA47f9xfIijA=\");","map":{"version":3,"names":["createContext","useState","jsTPS","api","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","MARK_LIST_FOR_DELETION","DELETE_LIST_MODAL","CLOSE_MODAL","EDIT_SONG_MODAL","DELETE_SONG_MODAL","MARK_SONG_FOR_EDIT","MARK_SONG_FOR_DELETION","currentModal","NONE","DELETE_LIST","EDIT_SONG","DELETE_SONG","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","listForDeletion","editMode","songForEdit","storeReducer","action","type","payload","playlist","changeListName","id","newName","asyncChangeListName","response","getPlaylistById","data","success","name","updateList","updatePlaylistById","_id","getListPairs","getPlaylistPairs","pairsArray","moveSong","target","source","asyncMoveSong","console","log","songs","sourceSong","deletePlaylist","asyncDeletePlaylist","deletePlaylistById","closeModal","loadIdNamePairs","createNewList","asyncCreateNewList","createPlaylist","playlists","markListForDeletion","markSongForEdit","song_and_index","markSongForDeletion","getListMarkedForDeletion","isDeleteListModalOpen","closeCurrentList","modal","document","getElementById","classList","remove","asyncLoadIdNamePairs","setCurrentList","asyncSetCurrentList","history","push","getPlaylistSize","length","undo","undoTransaction","redo","doTransaction","addSong","index","song","asyncAddSong","splice","setlistNameActive"],"sources":["C:/Users/jhxia/Homeworks/CSE316HW3/client/src/store/index.js"],"sourcesContent":["import { createContext, useState } from 'react'\r\nimport jsTPS from '../common/jsTPS'\r\nimport api from '../api'\r\nexport const GlobalStoreContext = createContext({});\r\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\r\n\r\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\r\n// DATA STORE STATE THAT CAN BE PROCESSED\r\nexport const GlobalStoreActionType = {\r\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\r\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\r\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\r\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\r\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\r\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\r\n    MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\r\n    DELETE_LIST_MODAL: \"DELETE_LIST_MODAL\",\r\n    CLOSE_MODAL: \"CLOSE_MODAL\",\r\n    EDIT_SONG_MODAL: \"EDIT_SONG_MODAL\",\r\n    DELETE_SONG_MODAL: \"DELETE_SONG_MODAL\",\r\n    MARK_SONG_FOR_EDIT: \"MARK_SONG_FOR_EDIT\",\r\n    MARK_SONG_FOR_DELETION: \"MARK_SONG_FOR_DELETION\"\r\n}\r\nconst currentModal = {\r\n    NONE : \"NONE\",\r\n    DELETE_LIST : \"DELETE_LIST\",\r\n    EDIT_SONG: \"EDIT_SONG\",\r\n    DELETE_SONG: \"DELETE_SONG\"\r\n}\r\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\r\nconst tps = new jsTPS();\r\n\r\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\r\n// AVAILABLE TO THE REST OF THE APPLICATION\r\nexport const useGlobalStore = () => {\r\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\r\n    const [store, setStore] = useState({\r\n        idNamePairs: [],\r\n        currentList: null,\r\n        newListCounter: 0,\r\n        listNameActive: false,\r\n        listForDeletion: null,\r\n        currentModal: currentModal.NONE,\r\n        editMode: false,\r\n        songForEdit: null,\r\n    });\r\n\r\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\r\n    // HANDLE EVERY TYPE OF STATE CHANGE\r\n    const storeReducer = (action) => {\r\n        const { type, payload } = action;\r\n        switch (type) {\r\n            // LIST UPDATE OF ITS NAME\r\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\r\n                return setStore({\r\n                    idNamePairs: payload.idNamePairs,\r\n                    currentList: payload.playlist,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    listForDeletion: null,\r\n                    currentModal: currentModal.NONE,\r\n                    editMode: false,\r\n                    songForEdit: null\r\n                });\r\n            }\r\n            // STOP EDITING THE CURRENT LIST\r\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    listForDeletion: null,\r\n                    currentModal: currentModal.NONE,\r\n                    editMode: false,\r\n                    songForEdit: null\r\n                })\r\n            }\r\n            // CREATE A NEW LIST\r\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter + 1,\r\n                    listNameActive: false,\r\n                    listForDeletion: null,\r\n                    currentModal: currentModal.NONE,\r\n                    editMode: true,\r\n                    songForEdit: null\r\n                })\r\n            }\r\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\r\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\r\n                return setStore({\r\n                    idNamePairs: payload,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    listForDeletion: null,\r\n                    currentModal: currentModal.NONE,\r\n                    editMode: false,\r\n                    songForEdit: null\r\n                });\r\n            }\r\n            // PREPARE TO DELETE A LIST\r\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    listForDeletion: payload,\r\n                    currentModal: currentModal.NONE,\r\n                    editMode: false,\r\n                    songForEdit: null\r\n                });\r\n            }\r\n            // UPDATE A LIST\r\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    listForDeletion: null,\r\n                    currentModal: currentModal.NONE,\r\n                    editMode: false,\r\n                    songForEdit: null\r\n                });\r\n            }\r\n            // START EDITING A LIST NAME\r\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: true,\r\n                    listForDeletion: null,\r\n                    currentModal: currentModal.NONE,\r\n                    editMode: false,\r\n                    songForEdit: null\r\n                });\r\n            }\r\n            case GlobalStoreActionType.DELETE_LIST_MODAL: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    listForDeletion: payload,\r\n                    currentModal: currentModal.DELETE_LIST,\r\n                    editMode: false,\r\n                    songForEdit: null\r\n                })\r\n            }\r\n            case GlobalStoreActionType.EDIT_SONG_MODAL: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    listForDeletion: null,\r\n                    currentModal: currentModal.EDIT_SONG,\r\n                    editMode: false,\r\n                    songForEdit: payload\r\n                })\r\n            }\r\n            case GlobalStoreActionType.MARK_SONG_FOR_EDIT: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    listForDeletion: null,\r\n                    currentModal: currentModal.NONE,\r\n                    editMode: false,\r\n                    songForEdit: payload\r\n                })\r\n            }\r\n            default:\r\n                return store;\r\n        }\r\n    }\r\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\r\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \r\n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\r\n\r\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\r\n    store.changeListName = function (id, newName) {\r\n        // GET THE LIST\r\n        async function asyncChangeListName(id) {\r\n            let response = await api.getPlaylistById(id);\r\n            if (response.data.success) {\r\n                let playlist = response.data.playlist;\r\n                playlist.name = newName;\r\n                async function updateList(playlist) {\r\n                    response = await api.updatePlaylistById(playlist._id, playlist);\r\n                    if (response.data.success) {\r\n                        async function getListPairs(playlist) {\r\n                            response = await api.getPlaylistPairs();\r\n                            if (response.data.success) {\r\n                                let pairsArray = response.data.idNamePairs;\r\n                                storeReducer({\r\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\r\n                                    payload: {\r\n                                        idNamePairs: pairsArray,\r\n                                        playlist: playlist\r\n                                    }\r\n                                });\r\n                            }\r\n                        }\r\n                        getListPairs(playlist);\r\n                    }\r\n                }\r\n                updateList(playlist);\r\n            }\r\n        }\r\n        asyncChangeListName(id);\r\n    }\r\n    store.moveSong = function(target,source){\r\n        async function asyncMoveSong(){\r\n            let response = await api.getPlaylistById(store.currentList._id);\r\n            if(response.data.success){\r\n                let playlist = response.data.playlist\r\n                console.log(playlist)\r\n                console.log(playlist.songs)\r\n                console.log(source)\r\n                console.log(target)\r\n                let sourceSong = playlist.songs[source]\r\n                playlist.songs[source] = playlist.songs[target]\r\n                playlist.songs[target] = sourceSong\r\n                console.log(playlist.songs[source])\r\n                console.log(playlist.songs[target])\r\n                console.log(\"Inside moveSong\")\r\n                console.log(playlist.songs)\r\n                async function updateList(playlist) {\r\n                    response = await api.updatePlaylistById(playlist._id, playlist);\r\n                    if (response.data.success) {\r\n                        async function getListPairs(playlist) {\r\n                            response = await api.getPlaylistPairs();\r\n                            if (response.data.success) {\r\n                                let pairsArray = response.data.idNamePairs;\r\n                                storeReducer({\r\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\r\n                                    payload: {\r\n                                        idNamePairs: pairsArray,\r\n                                        playlist: playlist\r\n                                    }\r\n                                });\r\n                            }\r\n                        }\r\n                        getListPairs(playlist);\r\n                    }\r\n                }\r\n                updateList(playlist);\r\n            }\r\n        }\r\n        asyncMoveSong();\r\n    }\r\n    store.deletePlaylist = function () {\r\n        async function asyncDeletePlaylist() {\r\n            console.log(\"Inside deletePlaylist\")\r\n            console.log(store.listForDeletion)\r\n            const response = await api.deletePlaylistById(store.listForDeletion._id);\r\n            if (response.data.success) {\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.DELETE_LIST,\r\n                    payload: null\r\n                });\r\n                store.closeModal(\"delete-list-modal\")\r\n                store.loadIdNamePairs();\r\n            }   \r\n        }\r\n        asyncDeletePlaylist();\r\n    }\r\n    store.createNewList = function () {\r\n        async function asyncCreateNewList() {\r\n            let name = \"Untitled\" + (store.newListCounter+1);\r\n            const response = await api.createPlaylist({name: name, songs: []})\r\n            if (response.data.success){\r\n                let playlist = response.data.playlists;\r\n                if (response.data.success) {\r\n                    storeReducer({\r\n                        type: GlobalStoreActionType.CREATE_NEW_LIST,\r\n                        payload: playlist\r\n                    })\r\n                    store.newListCounter += 1\r\n                    store.loadIdNamePairs()\r\n                }\r\n            }\r\n        }\r\n        asyncCreateNewList()\r\n    }\r\n    store.markListForDeletion = function(id) {\r\n        console.log(\"inside markListForDeletion\", id);\r\n        storeReducer({\r\n            type: GlobalStoreActionType.DELETE_LIST_MODAL,\r\n            payload: id\r\n        })\r\n        console.log(id)\r\n        console.log(store.listForDeletion)\r\n    }\r\n    store.markSongForEdit = function(song_and_index) {\r\n        console.log(\"inside markSongForEdit\", song_and_index)\r\n        storeReducer({\r\n            type: GlobalStoreActionType.EDIT_SONG_MODAL,\r\n            payload: song_and_index\r\n        })\r\n    }\r\n    store.markSongForDeletion = function (song_and_index) {\r\n        console.log(\"inside markSongForDeletion\", song_and_index)\r\n        storeReducer({\r\n            type: GlobalStoreActionType.DELETE_SONG_MODAL,\r\n            payload: song_and_index\r\n        })\r\n    }\r\n    store.getListMarkedForDeletion = function() {\r\n        if(store.listForDeletion) {\r\n            return store.listForDeletion.name;\r\n        }\r\n    }\r\n    store.isDeleteListModalOpen = () => {\r\n        console.log(\"inside isDeleteListModalOpen\")\r\n        return store.currentModal === currentModal.DELETE_LIST;\r\n    }\r\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\r\n    store.closeCurrentList = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\r\n            payload: {}\r\n        });\r\n    }\r\n    store.closeModal = (modal) => {\r\n        document.getElementById(modal).classList.remove(\"is-visible\");\r\n        storeReducer({\r\n            type: GlobalStoreActionType.CLOSE_MODAL,\r\n            payload: null,\r\n        })\r\n    }\r\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\r\n    store.loadIdNamePairs = function () {\r\n        async function asyncLoadIdNamePairs() {\r\n            const response = await api.getPlaylistPairs();\r\n            if (response.data.success) {\r\n                let pairsArray = response.data.idNamePairs;\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\r\n                    payload: pairsArray\r\n                });\r\n            }\r\n            else {\r\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\r\n            }\r\n        }\r\n        asyncLoadIdNamePairs();\r\n    }\r\n\r\n    store.setCurrentList = function (id) {\r\n        async function asyncSetCurrentList(id) {\r\n            let response = await api.getPlaylistById(id);\r\n            if (response.data.success) {\r\n                let playlist = response.data.playlist;\r\n\r\n                if (response.data.success) {\r\n                    storeReducer({\r\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n                        payload: playlist\r\n                    });\r\n                    store.history.push(\"/playlist/\" + playlist._id);\r\n                }\r\n            }\r\n        }\r\n        asyncSetCurrentList(id);\r\n    }\r\n    store.getPlaylistSize = function() {\r\n        return store.currentList.songs.length;\r\n    }\r\n    store.undo = function () {\r\n        tps.undoTransaction();\r\n    }\r\n    store.redo = function () {\r\n        tps.doTransaction();\r\n    }\r\n    store.addSong = function (index,song) {\r\n        async function asyncAddSong() {\r\n            let response = await api.getPlaylistById(store.currentList._id);\r\n            if(response.data.success){\r\n                let playlist = response.data.playlist\r\n                console.log(playlist)\r\n                playlist.songs.splice(index, 0, song)\r\n                async function updateList(playlist) {\r\n                    response = await api.updatePlaylistById(playlist._id, playlist);\r\n                    if (response.data.success) {\r\n                        async function getListPairs(playlist) {\r\n                            response = await api.getPlaylistPairs();\r\n                            if (response.data.success) {\r\n                                let pairsArray = response.data.idNamePairs;\r\n                                storeReducer({\r\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\r\n                                    payload: {\r\n                                        idNamePairs: pairsArray,\r\n                                        playlist: playlist\r\n                                    }\r\n                                });\r\n                            }\r\n                        }\r\n                        getListPairs(playlist);\r\n                    }\r\n                }\r\n                updateList(playlist);\r\n            }\r\n        }\r\n        asyncAddSong()\r\n    }\r\n\r\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\r\n    store.setlistNameActive = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\r\n            payload: null\r\n        });\r\n    }\r\n\r\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\r\n    return { store, storeReducer };\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}